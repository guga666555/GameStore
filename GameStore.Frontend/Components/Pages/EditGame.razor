@page "/editgame"
@page "/editgame/{id:int}"
@rendermode InteractiveServer 

@inject NavigationManager NavigationManager
@inject GamesClients GamesClient
@inject GenresClient GenresClient
@inject ProductTypesClient ProductTypesClient
@inject PicturesClient PicturesClient
@inject PlataformClient PlataformClient

<PageTitle>@title</PageTitle>
<h3>@title</h3>

@if (genres is null || plataforms is null || pictures is null ||
    productTypes is null ||  game is null)
{
    <p><em>Loading...</em></p>
}
else{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model ="@game" FormName="editGames" OnValidSubmit="HandleSubmitAsync" Enhance>
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="game.Name" class="form-control"/>
                    <ValidationMessage For="() => game.Name"/>
                </div>
                <div class="mb-3">
                    <label for="plataform" class="form-label">Plataform:</label>
                    <InputSelect id="plataform" @bind-Value="game.PlataformId" class="form-select">
                        <option value="">Select a plataform</option>
                        @foreach(var plataform in plataforms){
                            <option value="@plataform.Id">@plataform.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => game.GenreId"/>
                </div>
                <div class="mb-3">
                    <label for="picture" class="form-label">Picture:</label>
                    <InputSelect id="picture" @bind-Value="game.PictureId" class="form-select">
                        <option value="">Select a picture</option>
                        @foreach(var picture in pictures){
                            <option value="@picture.Id">@picture.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => game.GenreId"/>
                </div>
                <div class="mb-3">
                    <label for="productType" class="form-label">Product Type:</label>
                    <InputSelect id="productType" @bind-Value="game.ProductTypeId" class="form-select">
                        <option value="">Select a Product Type</option>
                        @foreach(var productType in productTypes){
                            <option value="@productType.Id">@productType.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => game.GenreId"/>
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputSelect id="genre" @bind-Value="game.GenreId" class="form-select">
                        <option value="">Select a genre</option>
                        @foreach(var genre in genres){
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => game.GenreId"/>
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="game.Price" class="form-control"/>
                    <ValidationMessage For="() => game.Price"/>
                </div>
                <div class="mb-3">
                    <label for="releaseDate" class="form-label">Release Date:</label>
                    <InputDate id="releaseDate" @bind-Value="game.ReleaseDate" class="form-control"/>
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>
                <a role="button" class="btn btn-danger" href="/">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {
    [SupplyParameterFromForm] private GameDetails? game { get; set; }
    [Parameter] public int? Id {get; set;}
    private string title = string.Empty;

    private GenreSummary[]? genres;
    private PictureSummary[]? pictures;
    private PlataformSummary[]? plataforms;
    private ProductTypesSummary[]? productTypes;

    protected override async Task OnInitializedAsync(){
        genres = await GenresClient.GetGenresAsync();
        pictures = await PicturesClient.GetPicturesAsync();
        plataforms = await PlataformClient.GetPlataformsAsync();
        productTypes = await ProductTypesClient.GetProductTypeAsync();
    }

    protected override async Task OnParametersSetAsync(){
        if (game is not null) { return; }

        if (Id is not null){
            game = await GamesClient.GetGameAsync(Id.Value);
            title = $"Editing: {game.Name}";
        }    
        else{
            game = new(){
                Name = string.Empty,
                ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)               
            };
            title = "New Game";
        }
    }

    private async Task HandleSubmitAsync(){
        ArgumentNullException.ThrowIfNull(game);

        if (Id is null){ 
            await GamesClient.AddGamesAsync(game); 
        }
        else{
            game.Id = Id.Value;
            await GamesClient.UpdateGameAsync(game);
        }
        NavigationManager.NavigateTo("/");
    }
}
